name: Deploy QA

on:
  push:
    branches: [master]

jobs:
  build:
    name: Compile, Build and Deploy QA
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      
      - name: SCALA - Setup JDK
        uses: actions/setup-java@v3.11.0
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: GO - Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.0'
      
      - name: SCALA - Compile Code
        shell: bash
        run: |
          sbt -v "compile;"
      
      - name: GO - Install dependencies
        run: |
          cd src_go/download/check_status
          go get .
          go mod tidy
          cd ../../../

          cd src_go/download/initiate
          go get .
          go mod tidy
          cd ../../../

          cd src_go/search/check_status
          go get .
          go mod tidy
          cd ../../../

          cd src_go/search/initiate
          go get .
          go mod tidy
          cd ../../../
          
      - name: GO - Build
        shell: bash
        run: |
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -v -o ./src_go/download/check_status/bootstrap -tags lambda.norpc ./src_go/download/check_status/.
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -v -o ./src_go/download/initiate/bootstrap -tags lambda.norpc ./src_go/download/initiate/.
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -v -o ./src_go/search/check_status/bootstrap -tags lambda.norpc ./src_go/search/check_status/.
          cd ./src_go/search/initiate
          GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -v -o bootstrap -tags lambda.norpc .
          cd ../../../
      
      - name: SCALA - Packaging Code
        shell: bash
        run: |
          sbt -v "assembly;"

      - name: GO - Packaging Code
        shell: bash
        run: |
          cd ./src_go/download/check_status
          zip check_status.zip bootstrap
          cd ../../../

          cd ./src_go/download/initiate
          zip initiate.zip bootstrap
          cd ../../../

          cd ./src_go/search/check_status
          zip check_status.zip bootstrap
          cd ../../../

          cd ./src_go/search/initiate
          zip initiate.zip bootstrap validation/chess-finder-core_dynamic.h validation/chess-finder-core.h validation/graal_isolate_dynamic.h validation/graal_isolate.h validation/chess-finder-core.so
          cd ../../../
          
      - name: setup SAM
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploying Application
        run: |
          sam deploy --template-file template.yaml --stack-name chessfinder --capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND --s3-bucket ${{ secrets.AWS_APPLICATION_BUCKET }}
