name: Deploy QA

on:
  push:
    branches: [master]

jobs:
  build:
    name: Compile, Build and Deploy QA
    runs-on: ubuntu-20.04

    container: amazonlinux:2

    steps:     
      - name: Setup Amazon Linux
        shell: bash
        run: |
          yum update -y > /dev/null
          yum upgrade -y > /dev/null
          yum install zip -y > /dev/null
          yum install unzip -y > /dev/null
          yum install tar -y > /dev/null
          yum install gzip -y > /dev/null
          yum install wget -y > /dev/null
          yum install which -y > /dev/null
          yum groupinstall "Development Tools" -y > /dev/null

      - name: Install Python 3
        shell: bash
        run: |
          yum install python3 -y > /dev/null
          alternatives --install /usr/bin/python python /usr/bin/python2.7 1
          alternatives --install /usr/bin/python python /usr/bin/python3 2
          echo 1 | alternatives --config python
          ln -sf /usr/bin/pip3 /usr/bin/pip

      - name: Install SDKMAN
        shell: bash
        run: curl -s "https://get.sdkman.io" | bash > /dev/null

      - name: Install GIT
        shell: bash
        run: |
          yum install git -y > /dev/null
          git config --global --add safe.directory '*'

      - name: Install GraalVM JDK
        shell: bash
        run: |
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install java 17.0.8-graal > /dev/null
          echo "JAVA_HOME=$HOME/.sdkman/candidates/java/current" >> $GITHUB_ENV
          echo "$HOME/.sdkman/candidates/java/current/bin" >> $GITHUB_PATH
     
      - name: Install SBT
        shell: bash
        run: |
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install sbt 1.8.2 > /dev/null
          echo "$HOME/.sdkman/candidates/sbt/current/bin" >> $GITHUB_PATH 

      - name: Install SCALA
        shell: bash
        run: |
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install scala 3.3.0 > /dev/null
          echo "$HOME/.sdkman/candidates/scala/current/bin" >> $GITHUB_PATH
      
      - name: Install Go
        shell: bash
        run: |
          curl -O https://dl.google.com/go/go1.21.1.linux-amd64.tar.gz
          tar -C /usr/local -xzf go1.21.1.linux-amd64.tar.gz
          rm go1.21.1.linux-amd64.tar.gz
          echo "/usr/local/go/bin" >> $GITHUB_PATH
        
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: SCALA - Packaging Code
        shell: bash
        run: |
          sbt -v "assembly;"

      - name: GO - Packaging Code
        shell: bash
        run: |
          cd ./src_go/details/notification/subscriber
          go get .
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -v -o bootstrap -tags lambda.norpc .
          zip notification.zip bootstrap
          cd ../../../../

          cd ./src_go/download/check_status
          go get .
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -v -o bootstrap -tags lambda.norpc .
          zip check_status.zip bootstrap
          cd ../../../

          cd ./src_go/download/initiate
          go get .
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -v -o bootstrap -tags lambda.norpc .
          zip initiate.zip bootstrap
          cd ../../../

          cd ./src_go/download/process
          go get .
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -v -o bootstrap -tags lambda.norpc .
          zip process.zip bootstrap
          cd ../../../

          cd ./src_go/search/check_status
          go get .
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -v -o bootstrap -tags lambda.norpc .
          zip check_status.zip bootstrap
          cd ../../../

          cd ./src_go/search/initiate
          go get .
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -v -o bootstrap -tags lambda.norpc .
          zip initiate.zip bootstrap
          cd ../../../

          cd ./src_go/search/process
          go get .
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -v -o bootstrap -tags lambda.norpc .
          zip process.zip bootstrap
          cd ../../../
      
      - name: Make Python 3 default
        shell: bash
        run: |
          echo 2 | alternatives --config python
          python --version
          ldd --version
      
      - name: Setup SAM
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploying Application
        run: |
          sam deploy --template-file template.yaml --stack-name chessfinder-qa --capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND --s3-bucket ${{ secrets.AWS_APPLICATION_BUCKET }} --parameter-overrides ChessfinderZoneFileId=${{ secrets.CHESSFINDER_ZONE_FILE_ID }} EnvType=QA
